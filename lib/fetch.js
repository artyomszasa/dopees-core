const decorators = [];
const doFetch = (decorators, uri, init) => {
    let opts = init || {};
    for (const decorator of decorators) {
        const newOpts = decorator.decorate(uri, opts);
        if (newOpts) {
            opts = newOpts;
        }
    }
    return window.fetch(uri, opts);
};
export const decoratedFetch = Object.assign(Object.defineProperty((uri, init) => doFetch(decorators, uri, init), 'decorators', {
    get() { return decorators; }
}), {
    native: window.fetch.bind(window),
    include: (...input) => {
        const ds = [];
        for (const key of input) {
            if ('string' === typeof key) {
                const d = decorators.find(x => x.name === key);
                if (!d) {
                    throw new Error('invalid or missing decorator: ' + key);
                }
                ds.push(d);
            }
            else {
                ds.push(key);
            }
        }
        return (uri, init) => doFetch(ds, uri, init);
    },
    exclude: (...input) => {
        const ds = decorators.slice(0);
        for (const key of input) {
            if ('string' === typeof key) {
                const index = ds.findIndex(x => x.name === key);
                if (-1 !== index) {
                    ds.splice(index, 1);
                }
            }
            else {
                const index = ds.findIndex(x => x === key);
                if (-1 !== index) {
                    ds.splice(index, 1);
                }
            }
        }
        return (uri, init) => doFetch(ds, uri, init);
    }
});
const defaultErrors = {
    400: 'Bad request',
    500: 'Server error'
};
export class HttpError extends Error {
    constructor(response, message) {
        super(message ? message : defaultErrors[response.status] || `Unexpected error while fetching ${response.url}`);
        const that = this; // iOS workaround...
        Object.setPrototypeOf(that, HttpError.prototype);
        if ('function' === typeof Error.captureStackTrace) {
            Error.captureStackTrace(that, that.constructor);
        }
        this.response = response;
    }
}
export async function httpGet(uri) {
    const response = await decoratedFetch(uri, { method: 'GET' });
    if (response.ok) {
        return response;
    }
    const message = response.headers.get('X-Message');
    if (message) {
        throw new HttpError(response, message);
    }
    throw new HttpError(response);
}
export async function httpGetJson(uri) {
    const response = await httpGet(uri);
    return (await response.json());
}
//# sourceMappingURL=data:application/json;base64,